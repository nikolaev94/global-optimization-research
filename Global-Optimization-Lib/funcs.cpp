#define _USE_MATH_DEFINES
#include <math.h>

double rand_minimums[] = {
	0.603052,0.408337,
	0.652988,0.320592,
	1.000000,0.000000,
	0.066182,0.582587,
	0.904308,0.872639,
	0.344375,0.524932,
	0.000000,1.000000,
	0.948275,0.887031,
	0.226047,0.520153,
	0.341732,0.197620,
	0.069264,0.430955,
	0.000000,1.000000,
	0.45221 ,0.07292,
	0.579769,0.046396,
	0.000000,1.000000,
	0.310179,1.000000,
	0.909758,0.926195,
	0.434562,0.825608,
	0.06686 ,0.77051,
	0.641337,0.135186,
	0.885029,0.390289,
	0.649650,0.414282,
	0.142623,0.157327,
	0.862953,1.000000,
	0.46036 ,0.99314,
	0.379189,0.688051,
	0.845292,0.424546,
	0.441160,0.016803,
	1.000000,1.000000,
	0.303295,0.134722,
	0.109520,0.265486,
	1.000000,0.000000,
	0.593726,0.503014,
	0.694905,1.000000,
	0.051975,0.409344,
	0.125664,0.518969,
	0.000000,0.000000,
	0.155081,0.238663,
	0.53707 ,0.46181,
	0.110985,0.917791,
	1.000000,0.000000,
	0.776095,0.764724,
	0.087367,0.677632,
	0.308037,0.536113,
	0.042100,0.563607,
	0.287025,0.159219,
	0.451926,0.169839,
	0.884761,0.245341,
	0.047782,0.171633,
	0.00000 ,0.41596,
	0.192108,0.303789,
	0.554153,0.809821,
	0.91475 ,0.54149,
	0.661592,0.925902,
	0.962924,0.436680,
	0.000000,0.000000,
	0.616058,0.560244,
	0.439890,0.343722,
	0.218146,0.677192,
	1.000000,1.000000,
	0.198145,0.317876,
	0.875874,0.653336,
	0.22999 ,0.33624,
	0.169351,0.015656,
	0.760073,0.906035,
	0.702941,0.308403,
	0.365371,0.282325,
	0.314012,0.651377,
	0.237687,0.374368,
	0.586334,0.508672,
	0.000000,0.000000,
	0.383319,1.000000,
	0.780103,0.103783,
	0.350265,0.566946,
	0.798535,0.478706,
	0.31759 ,0.06967,
	0.715929,0.704778,
	0.563040,0.442557,
	0.565078,0.322618,
	0.146731,0.510509,
	0.000000,0.543167,
	0.208533,0.454252,
	0.155111,0.972329,
	0.000000,1.000000,
	0.336467,0.909056,
	0.57001 ,0.90847,
	0.296290,0.540579,
	0.172262,0.332732,
	0.000000,1.000000,
	1.000000,0.000000,
	1.000000,1.000000,
	0.674061,0.869954,
	1.000000,1.000000,
	0.852506,0.637278,
	0.877491,0.399780,
	0.835605,0.751888,
	0.673378,0.827427,
	0.831754,0.367117,
	0.601971,0.734465,
	0.000000,0.000000
};

static double rndm20(unsigned char k[]);
static void gen(unsigned char k[],unsigned char k1[],int kap1,int kap2);

static unsigned char matcon[10][45]={
    {0,0,1,1,1,0,1,0,1,1,0,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0},
    {0,1,1,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,0,1,0,1,1,1},
    {1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,0,0,1,0,0},
    {0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0},
    {1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1},
    {0,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,0},
    {1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0},
    {0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1},
    {1,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,1,0,0,0,1,1,0,1},
    {1,0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0},
};
static unsigned char icnf[45];
static double af[7][7],bf[7][7],cf[7][7],df[7][7];
static double snx[7],csx[7],sny[7],csy[7];


double random_func(double* y, int n)
{
    int i,j;
    double d1,d2,sx1,cx1,sy1,cy1;

    d1=M_PI*y[0];
    d2=M_PI*y[1];
    sx1=sin(d1);
    cx1=cos(d1);
    sy1=sin(d2);
    cy1=cos(d2);
    snx[0]=sx1;
    csx[0]=cx1;
    sny[0]=sy1;
    csy[0]=cy1;
    for(i=0;i<6;i++){
        snx[i+1]=snx[i]*cx1+csx[i]*sx1;
        csx[i+1]=csx[i]*cx1-snx[i]*sx1;
        sny[i+1]=sny[i]*cy1+csy[i]*sy1;
        csy[i+1]=csy[i]*cy1-sny[i]*sy1;
    }
    d1=0;
    d2=0;
    for(i=0;i<7;i++)
        for(j=0;j<7;j++){
            d1=d1+af[i][j]*snx[i]*sny[j]+bf[i][j]*csx[i]*csy[j];
            d2=d2+cf[i][j]*snx[i]*sny[j]-df[i][j]*csx[i]*csy[j];
        }
    return -(sqrt(d1*d1+d2*d2));
}

double random_pfuncx(double* y,int n)
{
    int i,j;
    double dd,d1,d2,t1,t2,sx1,cx1,sy1,cy1;

    d1=M_PI*y[0];
    d2=M_PI*y[1];
    sx1=sin(d1);
    cx1=cos(d1);
    sy1=sin(d2);
    cy1=cos(d2);
    snx[0]=sx1;
    csx[0]=cx1;
    sny[0]=sy1;
    csy[0]=cy1;
    for(i=0;i<6;i++){
        snx[i+1]=snx[i]*cx1+csx[i]*sx1;
        csx[i+1]=csx[i]*cx1-snx[i]*sx1;
        sny[i+1]=sny[i]*cy1+csy[i]*sy1;
        csy[i+1]=csy[i]*cy1-sny[i]*sy1;
    }
    d1=0;
    d2=0;
    for(i=0;i<7;i++)
        for(j=0;j<7;j++){
            d1=d1+af[i][j]*snx[i]*sny[j]+bf[i][j]*csx[i]*csy[j];
            d2=d2+cf[i][j]*snx[i]*sny[j]-df[i][j]*csx[i]*csy[j];
        }
    dd=sqrt(d1*d1+d2*d2);
	 t1=0;
	 t2=0;
    for(i=0;i<7;i++)
        for(j=0;j<7;j++){
				t1+= af[i][j]*M_PI*(i+1)*csx[i]*sny[j];
				t1-= bf[i][j]*M_PI*(i+1)*snx[i]*csy[j];
				t2+= cf[i][j]*M_PI*(i+1)*csx[i]*sny[j];
				t2+= df[i][j]*M_PI*(i+1)*snx[i]*csy[j];
        }
	 return((t1*d1+t2*d2)/dd);
}

double random_pfuncy(double* y,int n)
{
    int i,j;
    double dd,d1,d2,t1,t2,sx1,cx1,sy1,cy1;

    d1=M_PI*y[0];
    d2=M_PI*y[1];
    sx1=sin(d1);
    cx1=cos(d1);
    sy1=sin(d2);
    cy1=cos(d2);
    snx[0]=sx1;
    csx[0]=cx1;
    sny[0]=sy1;
    csy[0]=cy1;
    for(i=0;i<6;i++){
        snx[i+1]=snx[i]*cx1+csx[i]*sx1;
        csx[i+1]=csx[i]*cx1-snx[i]*sx1;
        sny[i+1]=sny[i]*cy1+csy[i]*sy1;
        csy[i+1]=csy[i]*cy1-sny[i]*sy1;
    }
    d1=0;
    d2=0;
    for(i=0;i<7;i++)
        for(j=0;j<7;j++){
            d1=d1+af[i][j]*snx[i]*sny[j]+bf[i][j]*csx[i]*csy[j];
            d2=d2+cf[i][j]*snx[i]*sny[j]-df[i][j]*csx[i]*csy[j];
        }
    dd=sqrt(d1*d1+d2*d2);
	 t1=0;
	 t2=0;
    for(i=0;i<7;i++)
        for(j=0;j<7;j++){
				t1+= af[i][j]*M_PI*(j+1)*snx[i]*csy[j];
				t1-= bf[i][j]*M_PI*(j+1)*csx[i]*sny[j];
				t2+= cf[i][j]*M_PI*(j+1)*snx[i]*csy[j];
				t2+= df[i][j]*M_PI*(j+1)*csx[i]*sny[j];
        }
	 return((t1*d1+t2*d2)/dd);
}

void set_random(int nf)
{
    int lst,i,j,i1,i2,i3;

    if(nf<1 || nf>100)
        nf=1;
    lst=10;
    i1=(nf-1)/lst;
    i2=i1*lst;
    for(j=0;j<45;j++)
        icnf[j]=matcon[i1][j];
    if(i2 != (nf-1)){
        i3=nf-1-i2;
        for(j=1;j<=i3;j++)
            for(i=0;i<196;i++)
                rndm20(icnf);
    }
    for(j=0;j<7;j++)
        for(i=0;i<7;i++){
            af[i][j]=2.*rndm20(icnf)-1.;
            cf[i][j]=2.*rndm20(icnf)-1.;
        }
    for(j=0;j<7;j++)
        for(i=0;i<7;i++){
            bf[i][j]=2.*rndm20(icnf)-1.;
            df[i][j]=2.*rndm20(icnf)-1.;
        }

}

static double rndm20(unsigned char k[])
{
    int i;
    unsigned char k1[45];
    double de2,rndm;

    for(i=0;i<38;i++)
        k1[i]=k[i+7];
    for(i=38;i<45;i++)
        k1[i]=0;
    for(i=0;i<45;i++)
        k[i]=abs(k[i]-k1[i]);
    for(i=27;i<45;i++)
        k1[i]=k[i-27];
    for(i=0;i<27;i++)
        k1[i]=0;

    gen(k,k1,9,44);
    gen(k,k1,0,8);

    rndm=0.;
    de2=1.;
    for(i=0;i<36;i++){
        de2=de2/2;
        rndm=rndm+k[i+9]*de2;
    }
    return (rndm);
}

static void gen(unsigned char k[],unsigned char k1[],int kap1,int kap2)
{
    int jct,i,j;

    jct=0;
    for(i=kap2;i>=kap1;i--){
        j    = (k[i]+k1[i]+jct)/2;
        k[i] = k[i]+k1[i]+jct-j*2;
        jct  = j;
    }
    if(jct!=0)
        for(i=kap2;i>=kap1;i--){
            j    = (k[i]+jct)/2;
            k[i] = k[i]+jct-j*2;
            jct  = j;
        }
}
